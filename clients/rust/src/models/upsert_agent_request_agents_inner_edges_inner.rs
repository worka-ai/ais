/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpsertAgentRequestAgentsInnerEdgesInner {
    /// 0 or more conditions under which the source agent can invoke the associated [target] [Agent] If empty, the target can be invoked under any circumstances
    #[serde(rename = "conditions")]
    pub conditions: Vec<i64>,
    /// If two edges could be invoked and both are not required then the highest priority one should be executed
    #[serde(rename = "priority")]
    pub priority: i32,
    /// A JavaScript condition which must evaluate to true for the agent to be executed
    #[serde(rename = "script_condition", skip_serializing_if = "Option::is_none")]
    pub script_condition: Option<String>,
    /// The agent ID that should be called if [script_condition] or any of the [conditions] are true
    #[serde(rename = "target_agent_id")]
    pub target_agent_id: i64,
}

impl UpsertAgentRequestAgentsInnerEdgesInner {
    pub fn new(conditions: Vec<i64>, priority: i32, target_agent_id: i64) -> UpsertAgentRequestAgentsInnerEdgesInner {
        UpsertAgentRequestAgentsInnerEdgesInner {
            conditions,
            priority,
            script_condition: None,
            target_agent_id,
        }
    }
}

