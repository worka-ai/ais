=begin
#

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module Worka
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param create_agent_request [CreateAgentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAgentResponse]
    def agent_put(create_agent_request, opts = {})
      data, _status_code, _headers = agent_put_with_http_info(create_agent_request, opts)
      data
    end

    # @param create_agent_request [CreateAgentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAgentResponse, Integer, Hash)>] CreateAgentResponse data, response status code and response headers
    def agent_put_with_http_info(create_agent_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.agent_put ...'
      end
      # verify the required parameter 'create_agent_request' is set
      if @api_client.config.client_side_validation && create_agent_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_agent_request' when calling DefaultApi.agent_put"
      end
      # resource path
      local_var_path = '/agent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_agent_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAgentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.agent_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#agent_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param create_conversation_request [CreateConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateConversationResponse]
    def conversation_post(create_conversation_request, opts = {})
      data, _status_code, _headers = conversation_post_with_http_info(create_conversation_request, opts)
      data
    end

    # @param create_conversation_request [CreateConversationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConversationResponse, Integer, Hash)>] CreateConversationResponse data, response status code and response headers
    def conversation_post_with_http_info(create_conversation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.conversation_post ...'
      end
      # verify the required parameter 'create_conversation_request' is set
      if @api_client.config.client_side_validation && create_conversation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_conversation_request' when calling DefaultApi.conversation_post"
      end
      # resource path
      local_var_path = '/conversation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_conversation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateConversationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.conversation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#conversation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param update_llm_config_request [UpdateLLMConfigRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateLLMConfigResponse]
    def llm_config_post(update_llm_config_request, opts = {})
      data, _status_code, _headers = llm_config_post_with_http_info(update_llm_config_request, opts)
      data
    end

    # @param update_llm_config_request [UpdateLLMConfigRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateLLMConfigResponse, Integer, Hash)>] UpdateLLMConfigResponse data, response status code and response headers
    def llm_config_post_with_http_info(update_llm_config_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.llm_config_post ...'
      end
      # verify the required parameter 'update_llm_config_request' is set
      if @api_client.config.client_side_validation && update_llm_config_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_llm_config_request' when calling DefaultApi.llm_config_post"
      end
      # resource path
      local_var_path = '/llm_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_llm_config_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateLLMConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.llm_config_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#llm_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param create_tenant_request [CreateTenantRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateTenantResponse]
    def tenant_post(create_tenant_request, opts = {})
      data, _status_code, _headers = tenant_post_with_http_info(create_tenant_request, opts)
      data
    end

    # @param create_tenant_request [CreateTenantRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTenantResponse, Integer, Hash)>] CreateTenantResponse data, response status code and response headers
    def tenant_post_with_http_info(create_tenant_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tenant_post ...'
      end
      # verify the required parameter 'create_tenant_request' is set
      if @api_client.config.client_side_validation && create_tenant_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_tenant_request' when calling DefaultApi.tenant_post"
      end
      # resource path
      local_var_path = '/tenant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_tenant_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTenantResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.tenant_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tenant_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param tool_upsert [ToolUpsert] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tool_put(tool_upsert, opts = {})
      tool_put_with_http_info(tool_upsert, opts)
      nil
    end

    # @param tool_upsert [ToolUpsert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tool_put_with_http_info(tool_upsert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tool_put ...'
      end
      # verify the required parameter 'tool_upsert' is set
      if @api_client.config.client_side_validation && tool_upsert.nil?
        fail ArgumentError, "Missing the required parameter 'tool_upsert' when calling DefaultApi.tool_put"
      end
      # resource path
      local_var_path = '/tool'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tool_upsert)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.tool_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tool_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [GetWorkflowResponse]
    def workflow_id_get(id, opts = {})
      data, _status_code, _headers = workflow_id_get_with_http_info(id, opts)
      data
    end

    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWorkflowResponse, Integer, Hash)>] GetWorkflowResponse data, response status code and response headers
    def workflow_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.workflow_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.workflow_id_get"
      end
      # resource path
      local_var_path = '/workflow/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWorkflowResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.workflow_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#workflow_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param create_workflow_request [CreateWorkflowRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateWorkflowResponse]
    def workflow_post(create_workflow_request, opts = {})
      data, _status_code, _headers = workflow_post_with_http_info(create_workflow_request, opts)
      data
    end

    # @param create_workflow_request [CreateWorkflowRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWorkflowResponse, Integer, Hash)>] CreateWorkflowResponse data, response status code and response headers
    def workflow_post_with_http_info(create_workflow_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.workflow_post ...'
      end
      # verify the required parameter 'create_workflow_request' is set
      if @api_client.config.client_side_validation && create_workflow_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_workflow_request' when calling DefaultApi.workflow_post"
      end
      # resource path
      local_var_path = '/workflow'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_workflow_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateWorkflowResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.workflow_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#workflow_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
