# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from worka.models.upsert_agent_request_agents_inner_edges_inner import UpsertAgentRequestAgentsInnerEdgesInner
from worka.models.upsert_agent_request_agents_inner_rules_inner import UpsertAgentRequestAgentsInnerRulesInner
from worka.models.upsert_agent_request_agents_inner_rules_inner_tools_inner import UpsertAgentRequestAgentsInnerRulesInnerToolsInner
from typing import Optional, Set
from typing_extensions import Self

class UpsertAgentRequestAgentsInner(BaseModel):
    """
    UpsertAgentRequestAgentsInner
    """ # noqa: E501
    created_at: Optional[datetime] = None
    description: StrictStr
    edges: Optional[List[UpsertAgentRequestAgentsInnerEdgesInner]] = None
    examples: Optional[List[StrictStr]] = None
    expected_input: StrictStr = Field(description="The info the agent expects in its prompt")
    id: StrictInt
    is_default: Optional[datetime] = None
    name: StrictStr
    rules: List[UpsertAgentRequestAgentsInnerRulesInner]
    tags: Optional[List[StrictStr]] = None
    tenant_id: StrictInt
    tools: Optional[List[UpsertAgentRequestAgentsInnerRulesInnerToolsInner]] = Field(default=None, description="Tools that the agent itself has access to as opposed to those inherited from the rules")
    __properties: ClassVar[List[str]] = ["created_at", "description", "edges", "examples", "expected_input", "id", "is_default", "name", "rules", "tags", "tenant_id", "tools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpsertAgentRequestAgentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item_edges in self.edges:
                if _item_edges:
                    _items.append(_item_edges.to_dict())
            _dict['edges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpsertAgentRequestAgentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "edges": [UpsertAgentRequestAgentsInnerEdgesInner.from_dict(_item) for _item in obj["edges"]] if obj.get("edges") is not None else None,
            "examples": obj.get("examples"),
            "expected_input": obj.get("expected_input"),
            "id": obj.get("id"),
            "is_default": obj.get("is_default"),
            "name": obj.get("name"),
            "rules": [UpsertAgentRequestAgentsInnerRulesInner.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "tags": obj.get("tags"),
            "tenant_id": obj.get("tenant_id"),
            "tools": [UpsertAgentRequestAgentsInnerRulesInnerToolsInner.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None
        })
        return _obj


